// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.1;

import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "hardhat/console.sol";
import {Base64} from "./libraries/Base64.sol";

contract Nft is ERC721URIStorage {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    event NewMint(string svg, Counters.Counter id);

    string str1 =
        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512.001 512.001' style='enable-background:new 0 0 512.001 512.001' xml:space='preserve'>  <path style='fill:#f7b239' d='M346.199 70.151c71.103 0 61.614 77.228 61.614 77.228v.013c-4.255.527-8.598.803-13.016.803-57.485 0-104.088-46.591-104.088-104.076 0-3.188.138-6.338.427-9.451h.013c7.895 1.657 15.714 4.418 23.233 8.309 13.002 6.715 23.709 16.116 31.817 27.174z'/>  <path style='fill:#f2f2f2' d='M302.483 391.992c7.807 9.288 6.765 21.538.301 29.822a3.021 3.021 0 0 0-.314-.389c-11.133-13.229-27.814-21.638-46.465-21.638-18.651 0-35.345 8.409-46.478 21.638-.1.126-.213.238-.314.377-6.451-8.284-7.493-20.534.314-29.809 11.146-13.229 27.826-21.638 46.478-21.638 18.651-.002 35.332 8.408 46.478 21.637z'/>  <path style='fill:";
    string str2 =
        "' d='M429.891 231.95c22.668 6.702 39.21 27.701 39.21 52.54 0 24.914-16.63 45.963-39.411 52.603.138-2.786.201-5.585.201-8.397V231.95zM82.32 337.092h-.013c-22.768-6.64-39.411-27.688-39.411-52.603 0-24.839 16.543-45.837 39.223-52.54v96.746c0 2.812.063 5.611.201 8.397z'/>  <path style='fill:#f95428' d='M302.47 421.425c.113.126.226.251.314.389-4.28 5.497-10.945 9.25-18.978 9.25h-55.602c-8.045 0-14.71-3.765-18.99-9.263.1-.138.213-.251.314-.377 11.133-13.229 27.826-21.638 46.478-21.638s35.331 8.41 46.464 21.639z'/>  <path style='fill:#f7b239' d='M373.172 272.616c11.221 0 17.911 12.777 11.259 21.814-6.702 9.075-17.471 14.961-29.621 14.961-20.308 0-36.775-16.467-36.775-36.775h55.137z'/>  <path style='fill:";
    string str3 =
        "' d='M283.806 431.064c8.033 0 14.698-3.753 18.978-9.25 6.464-8.284 7.506-20.534-.301-29.822-11.146-13.229-27.826-21.638-46.478-21.638s-35.332 8.409-46.478 21.638c-7.807 9.275-6.765 21.526-.314 29.809 4.28 5.497 10.945 9.263 18.99 9.263h55.603zm34.228-158.448c0 20.308 16.467 36.775 36.775 36.775 12.15 0 22.919-5.887 29.621-14.961 6.652-9.037-.038-21.814-11.259-21.814h-55.137zm-124.058 0h-55.138c-11.221 0-17.911 12.777-11.259 21.814 6.702 9.075 17.471 14.961 29.621 14.961 20.309 0 36.776-16.467 36.776-36.775zm235.915 11.874v44.206c0 2.811-.063 5.61-.201 8.397-2.673 56.155-31.981 105.343-75.559 135.178-.377.276-.766.527-1.142.791-27.701 18.639-61.062 29.521-96.984 29.521s-69.283-10.882-96.984-29.521c-.377-.264-.766-.515-1.142-.791-43.578-29.834-72.886-79.023-75.559-135.178a169.72 169.72 0 0 1-.201-8.397V183.301c0-48.009 19.467-91.487 50.933-122.953S207.984 9.415 256.005 9.415c13.48 0 26.596 1.531 39.185 4.431a104.516 104.516 0 0 0-4.481 30.274c0 57.485 46.603 104.076 104.088 104.076 4.418 0 8.761-.276 13.016-.803a104.144 104.144 0 0 0 17.534-3.753 174.985 174.985 0 0 1 4.544 39.662V284.49z'/>  <path style='fill: ";
    string str4 =
        "' d='M223.029 473.061c-.377-.264-.766-.515-1.142-.791-43.578-29.834-72.886-79.023-75.559-135.178a169.72 169.72 0 0 1-.201-8.397V183.301c0-48.009 19.467-91.487 50.933-122.953 24.3-24.299 55.757-41.432 90.94-47.981a174.886 174.886 0 0 0-31.995-2.952c-48.021 0-91.487 19.467-122.953 50.933s-50.933 74.944-50.933 122.953v145.395c0 2.811.063 5.61.201 8.397 2.673 56.155 31.981 105.343 75.559 135.178.377.276.766.527 1.142.791 27.701 18.639 61.062 29.521 96.984 29.521a174.94 174.94 0 0 0 32.005-2.951 172.95 172.95 0 0 1-64.981-26.571z'/>  <path style='fill:#f7b239' d='M138.838 272.616h55.138c0 20.308-16.467 36.775-36.775 36.775-12.15 0-22.919-5.887-29.621-14.961-6.652-9.037.038-21.814 11.258-21.814z'/>  <path style='fill:#333' d='M478.52 284.49c0-25.838-15.813-49.211-39.214-59.136v-42.052c0-14.104-1.614-28.169-4.796-41.806a9.416 9.416 0 0 0-11.926-6.86c-1.642.503-3.3.945-4.965 1.358-.313-14.04-3.403-37.014-18.477-54.054-11.584-13.094-27.826-20.172-48.316-21.089-8.721-10.775-19.625-19.777-32.114-26.239a101.628 101.628 0 0 0-17.141-6.965 94.654 94.654 0 0 1 2.631-11.067 9.413 9.413 0 0 0-6.895-11.908A184.472 184.472 0 0 0 256.004 0C154.932 0 72.703 82.229 72.703 183.301v42.049c-23.406 9.923-39.222 33.299-39.222 59.139 0 26.102 16.1 49.641 39.869 59.408 4.54 54.652 33.371 104.704 79.101 136.064.321.232.65.456.974.675l.338.228C184.027 501.234 219.381 512 256.004 512s71.977-10.767 102.296-31.174l.271-.183c.329-.221.66-.447.985-.682 45.729-31.361 74.562-81.414 79.101-136.068 23.767-9.768 39.863-33.304 39.863-59.403zM351.405 101.869c1.181 4.134 4.949 6.83 9.047 6.83.856 0 1.726-.118 2.591-.365 4.999-1.428 7.894-6.638 6.465-11.636a100.501 100.501 0 0 0-5.613-14.969c8.633 2.333 15.693 6.547 21.087 12.618 12.051 13.562 13.833 33.565 13.82 44.348-1.334.056-2.67.092-4.009.092-51.228 0-93.054-40.907-94.598-91.768a83.197 83.197 0 0 1 9.864 4.316c20.363 10.532 35.045 28.479 41.346 50.534zM52.308 284.49c0-15.419 7.965-29.595 20.395-37.857v75.715c-12.432-8.261-20.395-22.425-20.395-37.858zm368.171 44.209c0 54.308-26.792 105.076-71.669 135.803-.088.06-.174.122-.26.185-.162.121-.334.232-.5.344l-.318.215c-27.146 18.271-58.864 27.928-91.729 27.928-32.863 0-64.583-9.657-91.666-27.885l-.385-.261c-.164-.112-.334-.222-.495-.34a10.076 10.076 0 0 0-.26-.185c-44.876-30.727-71.669-81.495-71.669-135.803V183.301C91.53 92.61 165.313 18.827 256.005 18.827c9.28 0 18.54.776 27.632 2.312a113.74 113.74 0 0 0-2.341 22.975c0 62.583 50.916 113.499 113.499 113.499 7.856 0 15.654-.806 23.292-2.402a165.865 165.865 0 0 1 2.394 28.09v145.398h-.002zm18.827-6.357v-75.705c12.425 8.264 20.387 22.435 20.387 37.852 0 15.431-7.959 29.592-20.387 37.853z'/>  <path style='fill:#333' d='M373.168 263.198h-89.08c-5.199 0-9.413 4.215-9.413 9.413s4.215 9.414 9.413 9.414h24.785c1.457 19.02 9.681 60.241 52.561 79.465a9.369 9.369 0 0 0 3.844.826 9.415 9.415 0 0 0 3.856-18.006c-15.531-6.962-25.281-17.727-31.42-28.799a45.924 45.924 0 0 0 17.097 3.293c14.606 0 28.508-7.024 37.188-18.788 5.159-6.991 5.915-16.181 1.977-23.983-3.996-7.917-11.969-12.835-20.808-12.835zm3.684 25.639c-5.224 7.079-13.257 11.139-22.039 11.139-11.783 0-21.852-7.487-25.698-17.952h44.054c2.478 0 3.625 1.743 4.003 2.493.434.863.971 2.569-.32 4.32zm-120.848 72.099c-20.742 0-40.307 9.11-53.674 24.993-8.299 9.859-10.049 23.299-4.569 35.075 5.59 12.013 17.254 19.476 30.439 19.476h46.193v19.106c0 5.199 4.215 9.413 9.414 9.413a9.413 9.413 0 0 0 9.413-9.413v-20.43c9.157-2.641 16.815-9.103 21.026-18.152 5.481-11.776 3.73-25.217-4.567-35.076-13.368-15.882-32.932-24.992-53.675-24.992zm0 18.827c15.175 0 29.488 6.666 39.272 18.29 1.648 1.958 2.681 4.205 3.091 6.558A69.985 69.985 0 0 0 256 390.371a69.985 69.985 0 0 0-42.358 14.233c.412-2.351 1.443-4.595 3.091-6.552 9.783-11.623 24.096-18.289 39.271-18.289zm-32.578 41.119a51.184 51.184 0 0 1 32.576-11.684 51.192 51.192 0 0 1 32.578 11.685c-1.496.5-3.096.769-4.771.769h-55.606a14.996 14.996 0 0 1-4.777-.77zm-85.9-261.009a9.38 9.38 0 0 0 6.656-2.758l11.131-11.131 5.304 5.304c1.838 1.838 4.247 2.758 6.656 2.758s4.818-.919 6.656-2.758c3.676-3.676 3.676-9.637 0-13.312l-5.303-5.303 12.447-12.447 5.303 5.303a9.38 9.38 0 0 0 6.656 2.758 9.38 9.38 0 0 0 6.656-2.758 9.413 9.413 0 0 0 0-13.312l-5.303-5.303 11.131-11.131c3.676-3.676 3.676-9.637 0-13.312-3.675-3.676-9.636-3.676-13.312 0l-11.131 11.131-5.303-5.304c-3.675-3.676-9.636-3.676-13.312 0s-3.676 9.636 0 13.312l5.303 5.304-12.447 12.447-5.304-5.304c-3.676-3.676-9.637-3.676-13.312 0-3.676 3.676-3.676 9.637 0 13.312l5.304 5.304-11.131 11.131c-3.676 3.676-3.676 9.637 0 13.312a9.378 9.378 0 0 0 6.655 2.757zm-8.099 80.049a9.413 9.413 0 0 0 9.413 9.413h89.081a9.413 9.413 0 0 0 0-18.826H138.84c-5.198 0-9.413 4.215-9.413 9.413zm154.66 9.414h89.081a9.413 9.413 0 0 0 0-18.826h-89.081a9.413 9.413 0 0 0 0 18.826zm-64.436 32.689 6.31 48.575a9.414 9.414 0 0 0 9.336 8.201h41.418c5.199 0 9.413-4.215 9.413-9.413s-4.215-9.414-9.413-9.414h-33.148l-6.31-48.575a9.414 9.414 0 0 0-9.334-8.201h-89.08c-8.839 0-16.814 4.918-20.81 12.835-3.94 7.802-3.182 16.992 1.977 23.982 8.681 11.766 22.584 18.789 37.188 18.789a45.934 45.934 0 0 0 16.944-3.233c-6.143 11.079-15.867 21.836-31.268 28.739-4.744 2.126-6.866 7.696-4.739 12.441a9.414 9.414 0 0 0 8.595 5.565 9.369 9.369 0 0 0 3.844-.826c42.88-19.222 51.104-60.443 52.561-79.465h16.516zm-84.494 6.812c-1.292-1.751-.756-3.458-.32-4.319.378-.749 1.526-2.493 4.004-2.493h44.054c-3.847 10.465-13.914 17.951-25.698 17.951-8.783.001-16.816-4.058-22.04-11.139z'/>  <g/>  <g/>  <g/>  <g/>  <g/>  <g/>  <g/>  <g/>  <g/>  <g/>  <g/>  <g/>  <g/>  <g/>  <g/></svg>";

    string[] baseColor = ["#9ad14b", "#ea3fc5", "#3470a8", "#f7ff23"];

    string[] secondColor = ["#90bc42", "#f442e8", "#82cef2", "#fce700"];

    constructor() ERC721("Zoombie", "ZMB") {
        console.log("Deployed!");
    }

    function pickRandomColor(uint256 tokenId)
        public
        view
        returns (string memory)
    {
        uint256 rand = random(
            string(abi.encodePacked("FIRST_WORD", Strings.toString(tokenId)))
        );
        rand = rand % baseColor.length;
        return baseColor[rand];
    }

    function pickSecondColor(uint256 tokenId)
        public
        view
        returns (string memory)
    {
        uint256 rand = random(
            string(abi.encodePacked("SECOND_WORD", Strings.toString(tokenId)))
        );
        rand = rand % secondColor.length;
        return secondColor[rand];
    }

    // function pickRandomThirdWord(uint256 tokenId)
    //     public
    //     view
    //     returns (string memory)
    // {
    //     uint256 rand = random(
    //         string(abi.encodePacked("THIRD_WORD", Strings.toString(tokenId)))
    //     );
    //     rand = rand % thirdWords.length;
    //     return thirdWords[rand];
    // }

    function random(string memory input) internal pure returns (uint256) {
        return uint256(keccak256(abi.encodePacked(input)));
    }

    function mint() public {
        uint256 newItemId = _tokenIds.current();
        string memory firstColor = pickRandomColor(newItemId);
        string memory secColor = pickSecondColor(newItemId);
        // string memory third = pickRandomThirdWord(newItemId);
        string memory combinedWord = string(
            abi.encodePacked(
                str1,
                secColor,
                str2,
                firstColor,
                str3,
                secColor,
                str4
            )
        );
        // string memory finalSvg = string(
        //     abi.encodePacked(baseSvg, combinedWord, "</text></svg>")
        // );

        string memory json = Base64.encode(
            bytes(
                string(
                    abi.encodePacked(
                        '{"name": "',
                        string(abi.encodePacked(firstColor, secColor)),
                        '", "description": "Zombie toughts.", "image": "data:image/svg+xml;base64,',
                        Base64.encode(bytes(combinedWord)),
                        '"}'
                    )
                )
            )
        );

        string memory finalTokenUri = string(
            abi.encodePacked("data:application/json;base64,", json)
        );
        console.log("\n--------------------");
        console.log(
            string(
                abi.encodePacked(
                    "https://nftpreview.0xdev.codes/?code=",
                    finalTokenUri
                )
            )
        );
        console.log("--------------------\n");
        _safeMint(msg.sender, newItemId);
        _setTokenURI(newItemId, finalTokenUri);

        _tokenIds.increment();
        console.log(
            "An NFT w/ ID %s has been minted to %s",
            newItemId,
            msg.sender
        );
        emit NewMint(combinedWord, _tokenIds);
    }
}
//0x8810E60b87170311215F1a3C2A4c212518Bbe17C
